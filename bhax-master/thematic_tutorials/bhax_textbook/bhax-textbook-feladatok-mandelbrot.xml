<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
                
        </para>
        <para>
           <programlisting language="c"><![CDATA[
           	// Copyright - no copyright

#include <png++/png.hpp>

#define N 500
#define M 500
#define MAXX 0.7
#define MINX -2.0
#define MAXY 1.35
#define MINY -1.35

void GeneratePNG(int tomb[N][M]) {
  png::image<png::rgb_pixel> image(N, M);

  for (int x = 0; x < N; ++x) {
    for (int y = 0; y < M; ++y) {
      image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
    }
  }
  image.write("kimenet.png");
}

struct Komplex {
  double re, im;
};


int main() {
  int tomb[N][M];

  int i, j, k;
  double dx = (MAXX - MINX) / N;
  double dy = (MAXY - MINY) / M;

  struct Komplex C, Z, Zuj;

  int iteracio;

  for (i = 0; i < M; ++i) {
    for (j = 0; j < N; ++j) {
      C.re = MINX + j * dx;
      C.im = MAXY - i * dy;

      Z.re = 0;
      Z.im = 0;
      iteracio = 0;

      while (Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255) {
        Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
        Zuj.im = 2 * Z.re * Z.im + C.im;
        Z.re = Zuj.re;
        Z.im = Zuj.im;
      }
      tomb[i][j] = 256 - iteracio;
    }
  }
  GeneratePNG(tomb);

  return 0;
}]]></programlisting>

        </para>
        <para>
           A fenti kód a következő png képet fogja generálni:            
        </para>
        <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="/home/foldesizoltan/Letöltések/kimenet.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject>
<para>
	Ez a mandelbrot halmaz síkbeli ábrázolása.A mandelbrot halmaz komplex számokból áll.Ezekre a számokra igaz az,hogy X(n+1)=Xn^2+c. És ez nem tart a végtelenbe, azaz korlátos.
	A forráskód fordításához szükség van egy -lpng kapcsolóra,ugyanis a kód tartalmazza a png++ header file-t, ez szükség a png generáláshoz.
	A kódunk elején deklarálunk pár konstans számot, majd a png generáló eljárást is.Ez paraméterül kap egy NxM-es két dimenziós tömböt.Egy 500x500 -as képet fog létrehozni, két for ciklus segítségével és a tömbben lévő értékek szerint vagy fehér lesz az adott pixel vagy fekete. Az eljárás végén write-al hozzuk létre a png-t.Ezután létrehozzuk a Komplex struktúrát amiben egy valós és egy komplex szám lesz.A main elején deklaráljuk a szükséges változókat, és létrehozunk 3 Komplex osztályú változót is.Ezután a megfelelő képletet használva feltöltjük a mátrixot a megfelelő értékekkel és átadjuk a GeneratePNG eljárásnak a mátrixot.
</para>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
                
        </para>
        <para>
            <programlisting language="c"><![CDATA[
            	#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 ) 
    {
      szelesseg = atoi ( argv[2] ); 
      magassag =  atoi ( argv[3] ); 
      iteraciosHatar =  atoi ( argv[4] ); 
      a = atof ( argv[5] ); 
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag ); 


  double dx = ( b - a ) / szelesseg; 
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  for ( int j = 0; j < magassag; ++j )
    {
      

      for ( int k = 0; k < szelesseg; ++k )
        {

         
          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]></programlisting>

        </para>
        
                     <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="/home/foldesizoltan/Asztal/prog1/Mandelbrot/mandel.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <para>
        	Ez a kód nem sokban különbözik az előzőtől. Bekerült a complex header file. Ezáltal nem kell struktúrát használnunk,hogy kezeljük a komplex számokat, hanem ez a header file fogja kivitelezni azt. 
        	A kód elején deklaráljuk a szükséges változókat. Futtatáskor meg kell adnunk a kép magasságát és szélességét, azt hogy milyen néven hozza létre a képet, és az n a b c d értékeit. Ezt követően a program beállítja a megfelelő értékekre a változókat. Ha viszont rosszul adtuk meg a dolgokat(pl kevés számot adtunk meg) akkor kiíratja a használatot.Ezután a szükséges méretet lefoglaljuk a majd létrejövő képünknek.Maga a számolás a while ciklusban történik. A program futása közben folyamatosan tájékoztat arról,hogy hány százaléknál jár a generálás és arról is ha sikeresen lementette a képet.
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
        	<programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]></programlisting>
    
        </para> 
<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="/home/foldesizoltan/Asztal/prog1/Mandelbrot/bio.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 

        <para>
        	Ez a program lényegében Julia halmazokat fog létrehozni. Julia halmazokból végtelen mennyiségű van. Ennek a programnak az alapja az előző mandelbrotos program.A mandelbrot halmaz tartalmazza az összes Julia halmazt. 
        	A mandelbrotos programmal ellentétben itt a c nem változó lesz,hanem állandó, és a konzolról kérjük be. A kód elején megint csak létrehozzuk a megfelelő változókat. Majd bekérjük azokat és ha megfelelőek akkor a megfelelő változóhoz rendeljük azokat.Lefoglaljuk a helyet a képünknek. For ciklusukkal végig megyünk az összes pixelen és a megfelelő egyenlet segítségével kiszámoljuk az értékeket.Ez a program is jelzi,hogy hány százaléknál jár és hogy lementette-e már a képet.
        </para>


    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
            
        <para>
            <programlisting language="c"><![CDATA[
            	#include <QApplication>
#include "frakablak.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    
    FrakAblak w1;
    w1.show();

    /*
    FrakAblak w1,
    w2(-.08292191725019529, -.082921917244591272,
       -.9662079988595939, -.9662079988551173, 600, 3000),
    w3(-.08292191724880625, -.0829219172470933,
       -.9662079988581493, -.9662079988563615, 600, 4000),
    w4(.14388310361318304, .14388310362702217,
       .6523089200729396, .6523089200854384, 600, 38655);
    w1.show();
    w2.show();
    w3.show();
    w4.show();
*/
    return a.exec();
}]]></programlisting>
        </para>
<mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="/home/foldesizoltan/Képek/kép1.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <mediaobject>
        	<imageobject condition="printf">
        		<imagedata fileref="/home/foldesizoltan/Képek/kép2.png" format="PNG" scale="30"/>
        	</imageobject>
        </mediaobject> 
        <para>
            A fent látható kód működéséhez szükséges telepíteni a libqt4-dev-et.Valamint szükséges összesen 5 fájl. A fájlokat az előbb említett csomaggal fogjuk összefűzni. Először qmake -project parancssal létrefogunk hozni egy .pro kiterjesztésű fájlt, ennek a fájlnak az utolsó sorába be kell írnunk a QT += widgets mondatot. Ezek után qmake *.pro paranccsal létrejön egy makefile.Majd a make parancssal létrehozzuk a futtatható fájlt. Ezután futtatva a kódot megjelenik a Mandelbrot halmaz, amiben kijelölve egy területet bele tudunk nagyítani szinte a végtelenségig. Ez látható az első és a második képen. 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
        </para>
    </section>

</chapter>                
