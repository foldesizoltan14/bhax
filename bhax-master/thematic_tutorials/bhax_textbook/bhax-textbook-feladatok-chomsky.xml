<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <programlisting language="c"><![CDATA[
        #include <stdio.h>

int main(){
int sz=0;
int a=0;
printf("Adj meg egy számot");
scanf("%d", &sz);
printf("Unarisba atvaltva:");
for(int i=0;i<sz;i++)
{
printf("%d",1);
       }

return 0;
}]]></programlisting>
        <para>
           A fent látható program,egy decimális számot fog bekérni a konzolról és azt a számot unáris számrendszerbe fogja kiírni.Az unáris számrendszerbe úgy váltunk át,hogy annyiszor fogunk kiírni egy db egyest amennyi a szám értéke. Tehát pl ha beírjuk ,hogy 5 akkor 11111-et fog kiírni.Ezt egy egyszerű for ciklussal tesszük meg.
           A Turing gép úgy végezné ezt az átváltást,hogy a szám végéről indulva, ha 0-át lát, akkor kilencre vált, és mindig ki vonna egy számot, tehát 8,7,6,5,4,3,2,1,0 és a kivont egyeseket eltárolja, majd a folyamat végén kiírja őket.
        </para>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
           <programlisting language="c"><![CDATA[
S, X, Y legyenek változók
a, b, c legyenek konstansok

S->abc, S->aXbc, Xb->bX, Xc->Ybcc, bY->Yb, aY->aaX, aY->aa

S (S->aXbc)
aXbc (Xb->bX)
abXc (Xc->Ybcc)
abYbcc (bY->Yb)
aYbbcc (aY->aa)
aabbcc

de lehet így is:

S (S->aXbc)
aXbc (Xb->bX)
abXc (Xc->Ybcc)
abYbcc (bY->Yb)
aYbbcc (aY->aaX)
aaXbbcc (Xb->bX)
aabXbcc (Xb->bX)
aabbXcc (Xc->Ybcc)
aabbYbccc (bY->Yb)
aabYbbccc (bY->Yb)
aaYbbbccc (aY->aa)
aaabbbccc
          	]]></programlisting>
 <programlisting language="c"><![CDATA[
A, B, C legyenek változók
a, b, c legyenek konstansok

A->aAB, A->aC, CB->bCc, cB->Bc, C->bc

A (A->aAB)
aAB (A->aC)
aaCB (CB->bCc)
aabCc (C->bc)
aabbcc

de lehet így is:

A (A->aAB)
aAB (A->aAB)
aaABB (A->aAB)
aaaABBB (A->aC)
aaaaCBBB (CB->bCc)
aaaabCcBB (cB->Bc)
aaaabCBcB (cB->Bc)
aaaabCBBc (CB->bCc)
aaaabbCcBc (cB->Bc)
aaaabbCBcc (CB->bCc)
aaaabbbCccc (C->bc)
aaaabbbbcccc
          	 	]]></programlisting>

        </para>
        <para>
           A generatív grammatika különböző transzformációs szabályokat tartalmaz. Ezekhez szükségünk van egy alap szimbólumra, és ezen a szimbólumon tetszés szerint bármelyik szabályt bármennyiszer elvégezhetünk.Az a lényege, hogy egy fajta szimbólumot egy féleképpen tudunk létrehozni, ha több féleképpen is elő tud állni akkor ez a nyelv már nem generatív.

        </para>
        <para>
           Először megadunk konstansokat és változókat is . Ezután leírjuk a megfelelő nyelvtani szabályokat. Ezt nyilak segítségével tehetjük meg.Bal oldalon megadjuk hogy miből, jobb oldalon meg hogy mi lesz belőle.Ezt rövidebben is láthatjuk alatta. A második generatív nyelv létrehozásánal lényegében elég volt a változók nevét átírni a változók neveit, és máris egy másik generatív nyelvet kapunk amely ugyanazt a nyelvet generálja.
        </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        
        	<programlisting language="c"><![CDATA[
        	#include <stdio.h>

int main(){
for(int i=1;i<10;i++)
printf("lefut");
}}]]></programlisting>
        
        <para>
        1989-ben adták ki a C c89 es szabványát és 1999-ben a c99-et.Ezekben a szabványokban különböző szemantikai szabályok érvényesek. A fenti kódban egy ilyen különbségre láthatunk példát. Első ránézésre valószínű fel sem tűnik benne semmi érdekes.Egy sima for ciklus benne egy utasítással. Azonban a for ciklust a c89-es szabvány szerint így nem adhatjuk meg,ugyanis ebben még tilos volt a zárójelek között deklarálni a ciklusváltozót.Ahhoz,hogy ezt lássuk, a megadott szabvány szerint kell lefordítanunk a programot.Ezt a -std=gnu89 kapcsolóval tehetjük meg.Ez a c89-es szabvány szerint fogja lefordítani a programunkat.Így meg is kapjuk azt a hibakódot miszerint c99 szerint kellenne fordítanunk a programot mert amit próbálunk csinálni az eszerint a szabvány szerint nem megengedett.	
             
        </para>
        
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
           Kód: 
        </para>
         <programlisting><![CDATA[%{
 #include <string.h>
 int  szamok_szama =0;
%}
%% 		
[0-9]+		{++szamok_szama;}
			


%%

int 
main()
{
 yylex();
 printf("%d szam\n",szamok_szama); 							
return 0;

}]]></programlisting>
        
        <para> Magyarázat:A fent látható kód, a bemenetén megjelenő számokat fogja összeszámolni egy lexer segítségével.Egy lexer a bemenetén megjelenő szövegeket vizsgálja, és megadhatunk neki különböző mintákat,karaktereket amiket keres.A programot három fő részre lehet bontani, ezeket a fő részeket a % jelek határolják. Az első fő részben adhatjuk meg a különböző definíciókat,jelen esetben egy egész típusú változót hoztunk létre. A második részben adhatjuk meg,hogy mit keressen a lexer, és ha talált olyan karaktert,mit tegyen vele.Jelen esetünkben az egész számokat fogja keresni, és ha talál egyet, akkor a változónk értékét növeli eggyel. A harmadik részben pedig megadjuk, hogy a program végén írassa ki a változó értéket. Ezt a programot először egy .l kiterjesztésbe kell elmentenünk. Fordítása két lépésben történik. Először flex valami.l, ez a parancs létrehoz egy valami.yy.c kiterjeszésű fájlt,majd ezt a fájlt kell c fordítóval lefordítanunk a -lfl kapcsoló segítségével.
        </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <programlisting><![CDATA[%{
 #include <string.h>
 
%}
%% 		
"3" {printf("E");}
"4" {printf("A");}
"9" {printf("G");}
"1" {printf("I");}
"5" {printf("S");}
"2" {printf("Z");}
"(" {printf("C");}
"_|" {printf("J");}
"|_" {printf("L");}
"|)" {printf("D");}
"|\/|" {printf("M");}
			
"E" {printf("3");}
"A" {printf("4");}
"G" {printf("9");}
"I" {printf("1");}
"S" {printf("5");}
"Z" {printf("2");}
"C" {printf("(");}
"J" {printf("_|");}
"L" {printf("|_");}
"D" {printf("|)");}


%%

int 
main()
{
 yylex();
  							
return 0;

}]]></programlisting>
        
        
        <para>
            Magyarázat:A leet egy főleg az interneten elterjedt rejtnyelv. Különböző számokkal és jelekkel helyettesítenek betűket, az alapján h mihez hasonlítanak.A fenti kód egy ilyen szöveget alakít olvashatóvá, vagy sima szöveget alakít át.Ennek a programnak is a lexer az alapja csak úgy mint az előző feladatnál. A második fő részben vannak megadva a betűk és számok. Például az első sor: ha talál a program egy 3-ast azt át fogja írni egy E betűre.
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
    <para>Ha a SIGINT jelkezelése nem volt figyelmen kívűl hagyva akkor most se legyen. Ha figyelmen kívűl volt hagyva akkor a jelkezelő függvény kezelje.</para>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>
                <para>Ez egy for ciklus.A ciklusváltozónk az 'i' melynek kezdőértéke nulla.A ciklus addig fog futni amíg az i kissebb lesz mint 5, és minden ciklus végén az 'i'-t növeljük eggyel.</para>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>
                <para>Ez a for ciklus első ránézésre olyan mint az előző, azonban van egy különbés. Az előző ciklusnál ++i volt most pedig i++. Ennek a for ciklusnál nincs nagy jelentősége,mindkettő növelni fogja eggyel i értékét. Azonban vannak olyan helyzetek amikor nagy jelenősége lehet.Pl i=1 v=i++ és v=++i. Az elsőnél v értéke 1 lesz miközben i értéke kettő, mert hamarabb fogja v felvenni i értékét minthogy növelné eggyel i értékét. A másodiknál pedig előbb növeli, aztán teszi egyenlővé, szóval kettő lesz v értéke.</para>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>  
                <para>
                Egy tömböt tölt fel i értékeivel. Jelen esetben egy öt elemű tömböt hoz létre.
                </para>          
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>
                <para>
                Ebben a for ciklusban az i kisebb mint n mellett van még egy feltétel ,és a ciklus csak akkor fog lefutni ha mindkét feltétel igaz lesz .A második feltétel nem lesz jó,mert nem logika értéket fog visszaadni(== kellene).
                </para>           
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>
                <para>
                A printf segítségével kiíratunk két egész számot melyeket egy egy függvény fog meghatározni.
                </para>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting> 
                <para>
                Kiíratunk kt egész típusú számot, az egyik egy függvény fogja meghatározni.
                </para>           
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>  
                <para>
                Ugyanaz mint az előző csak itt az f függvény egy memóriacímet fog kapni
                </para>          
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
          Ennek a feladat megoldásához a következő logikai összekötőjeleket kell ismernünk:\neg=negáció(tagadás),\vee=vagy,\supset=implikácó. A kvantorok \exist=létezik, és a minden =\forall.
          Az első: Bármelyik x számhoz, tartozik egy olyan y prím szám, ami x-nél kisebb.
          Második:
        </para>
    </section>                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>      <para> Egy int típusú, azaz egész számot vezet be,melynek neve a lesz </para>       
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting> <para> A 'b' tárolni fogja 'a' memóriacímét, azaz 'b' 'a'-ra mutató mutató lesz. </para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>  <para> Itt az r nem vátlozó hanem egy memóriacím, mégpedig 'a' memóriacíme. </para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>  <para> Egy egész típusú 5 elemű tömb deklarálása. Az indexelés 0-tól kezdődik.</para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting> 
                <para>
                c 5 elemű tömg, minden eleméhez referenciát rendel.
                </para>           
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>  
                <para>
                d 5 elemű tömb összes tagja egy mutató lesz.
                </para>          
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>   
                <para>
                int típusú pointert visszaadó függvény.
                </para>         
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>
                <para>
                Egész típusra mutató pointert visszaadó függévny
                </para>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>    
                <para>
                 Két egészt kapó
                 </para>       
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                     


</chapter>                
