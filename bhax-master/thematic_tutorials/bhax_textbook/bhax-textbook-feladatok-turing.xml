<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        
        <para>
            Megoldás forrása:                
        </para>
        <para>
        	Kód:<programlisting language="c"><![CDATA[
#include <stdio.h>

int main(){
while(1){
	}
}	]]></programlisting>	

            Magyarázat:
            1.Egy szál 100%-osan futtatása:
				A main függvényben lévő while ciklus mindaddig lefog futni, amíg a while utáni zárójelben lévő feltétel igaz lesz. Jelen esetben a feltételnek '1' van beírva, ezt a gép mindig igaznak tekinti(a 0-át pedig hamisnak). Ezért ez a ciklus mindaddig futni fog amíg manuálisan ki nem iktatjuk.Ez a ciklus 1 szálat fog folyamatosan 100%-on futtatni.

	Kód:<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main(){
while (1){
sleep(1);
	}
}		]]></programlisting>

	Magyarázat:
	2.Egy szál 0%-on való futtatása:
		Az előzőhöz képest itt is egy végtelen while ciklusunk van a main függvényben, azonban itt megadunk egy sleep nevű utasítást is. A sleep működéséhez include-olnunk kell az unistd.h nevezetű header file-t is. A sleep függvény utáni zárójelben megadhatjuk,hogy az adott szálat hány másodpercig altassa a program.Ezt használhatjuk még programok késleltetésére is.

	Kód:<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <unistd.h>
#include <omp.h>

int main () {

#pragma omp parallel

	while (1) {
}
}]]></programlisting>

	Magyarázat:
	3.Minden szál futtatása 
		Ahhoz, hogy minden szálat lefoglaljon a programunk, párhuzamossá kell tennünk a program futását. Ehhez include-oljuk az openmp(Open Multi-Processing) alkalmazásprogramozási felületet(API-t). Ezt az omp.h header file-al tehetjük meg.Ezáltal a programunk párhozamosan fog futni több szálon.A main függvényünk kibővült a #pragma omp parallel sorral.Ez a sor fogja a while ciklusban lévő utasításokat az összes szálra irányítani.Így a végtelen ciklusunk az összes szálon fog egyszerre futni. Ahhoz,hogy ez a program leforduljon használnunk kell a -fopenmp kapcsolót is.



        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            Ha T1000-ben meghívjuk saját magát, és van benne végtelen ciklus akkor a Lefagy függvény igazat ad vissza ha nincs akkor pedig hamisat.A Lefagy2 pedig igaz értéknél igazat ad vissza, hamisnál pedig belép egy végtelen ciklusba,tehát ha nem is vlt benne végtelen ciklus most,már lesz így ellentmondás jön létre.Tehát ilyen program tényleg nem létezhet.
            
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Kód:<programlisting language="c"><![CDATA[
    #include <stdio.h>



int main()
{
    int a=7;
    int b=1;

    printf("Valtozok csere elott\n");

    printf("%d\n",a);
printf("%d\n",b);	
    

    a=a+b;
    b=a-b;
    a=a-b;

     printf("Valtozok csere utan\n");
 printf("%d\n",a);
printf("%d\n",b);	

    


    return 0;
}        ]]></programlisting>
			Magyarázat:Változók cseréje különbséggel:
				A main függvényünk elején deklarálunk két int típusú változót(a,b). Jelen esetünkben a=7 és b=1.A printf függvény segítségével tudunk a konzolra kiíratni.A printf utáni zárójelben idézőjelek közé írhatjuk be amit ki szeretnénk íratni. A %d kapcsoló azt adja meg, hogy az utána írt 'a' változót egész számként fogja kiírni. A \n kapcsoló pedig a sortörés. Maga a változó értékének cseréje egyszerű matematika. Az 'a' értéke  kezdetben 7, 'b' értéke pedig 1. Első lépésként 'a' értékét egyenlővé tesszük 'a' és 'b' összegével,így a=7+1=8.Második lépésként 'b' értékét egyenlővé tesszük 'a' és 'b' különbségével, így b=8-1=7. Majd utolsó lépséként 'a' értékét egyenlővé tesszük 'a' és 'b' különbségével, azaz a=8-7=1. Amint látjuk 'a' értéke 1 lett 'b' értéke pedig 7, tehát megcserélődtek.

		Kód:<programlisting language="c"><![CDATA[include <stdio.h>



int main()
{
    int a=7;
    int b=1;

   printf("Valtozok csere elott\n");

    printf("%d\n",a);
printf("%d\n",b);

    a=a*b;
    b=a/b;
    a=b/a;

    printf("Valtozok csere utan\n");
 printf("%d\n",a);
printf("%d\n",b);
    return 0;
}]]></programlisting>

		Magyarázat:
			Ez a példa annyiban különbözik az előzőtől,hogy itt az összeadás és különbség helyett szorzást és osztást használunk.Az 'a' értéke kezdetben megint csak 7, 'b' értéke pedig 1. Első lépésként 'a' értékét egyenlővé tesszük 'a' és 'b' szorzatával, a=7*1=7. Második lépésként 'b' értékét egyenlővé tesszük 'a' és 'b' hányadosával,b=7/1=7. Majd utolsó lépésként 'a' értékét egyenlővé tesszük 'b' és 'a' hányadosával azaz a=7/7=1.Ezek a változó cserék a régebbi időkben voltak hasznosak, ugyanis így nem kellett felesleges erőforrásokat lefoglalni egy segédváltozónak.

		
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Kód:<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int
main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );
 mvprintw ( y, x, "0" );

        refresh ();
        usleep ( 100000);

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) { 
            xnov = xnov * -1;
        }
        if ( x<=0 ) { 
            xnov = xnov * -1;
        }
        if ( y<=0 ) { 
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { 
            ynov = ynov * -1;
        }

    }
 return 0;
}]]></programlisting>
		Magyarázat:

		A programunk futásához include-olnunk kell a curses.h nevezetű header file-t, melyben a különböző képernyőkezeléshez szükséges függvények találhatóak.
		A main függvényünk elején a WINDOW paranccsal adjuk meg az ablak ábrázolását, és a későbbiekben ablak néven érjük el.Az initscr függvénnyel "tisztítjuk" le a konzolt.Ezután deklaráljuk az x és y koordinátákat melyek kezdőértékei 0 lesz.Utána az xnov és ynov deklarálása következik melyeknek értékei 1, ezekkel fogjuk növelni a koordinátákat, azaz léptetni a labdánkat.A pattogásunk alapja egy végtelen for ciklus, ezért ez addig fog futni amíg manuálisan ki nem lőjük. A getmaxyx függvény meghatározza a konzolunk maximális koordinátáit.Az mvprintw függvénnyel fogunk x és y koordinátákra jelen esetben egy '0'-t írni.Az usleep mögötti zárójelbe beírt szám fogja meghatározni a pattogás gyorsaságát. Minél nagyobb számot írunk be annál lassabb lesz, ugyanis ez a parancs altatja a ciklusunkat a megadott ideig. Ezután az x és y értékét növeljük xnov-el és ynov-el(jelen esetben 1 el). Az ezután következő 4 db if utasítás segít nekünk abban,hogy labdánk a konzolon belül maradjon.Ha elérte a bal, vagy jobb oldalt, akkor az xnov változó érétkét beszorozzuk -1 el, tehát előjelet fog váltani, ezáltal a következő körben csökkeni fog x értéke, tehát visszapattan a labdba. Ha pedig az ablak tetejét, vagy alját érte el akkor ugyanezt csináljuk meg csak az ynov változó értékével. 
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>
        </para>
        <para>Kód:<programlisting language="c"><![CDATA[
        	#include <stdio.h>


int main()
{
    int a=1;
    int count=0;
do
count++;

    while (a <<= 1) ;
    
    

printf("%d", count);
printf("bites a szohossz");
    return 0;
}}]]></programlisting>
</para>
        <para>
             Magyarázat:
        A fenti programunk számítógépünk int típusú változójának méretét fogja megadni.A main függvényben deklarálunk egy 'a' változót és értékét 1 re állítjuk.Ennek segítségével fogjuk mérni a szóhosszt. Valamint deklarálunk egy count nevezetű változót is, melyet majd növelünk és a programunk végénk kiíratjuk, ez lesz az int hossza.A main fő része egy do while ciklus. Ez, a sima while-al ellentétben hátultesztelős utasítás, tehét először fogja növelni a count értékt, és csak azután fogja letesztelni a while utáni feltételt. Ez azért fontos mert így tudjuk elérni,hogy az első shift is bele számítson az eredményünkbe.A szóhosszt az úgy nevezett bitshift operátor segítségével állapítjuk meg.Jelen példánkban a balra shiftelőt használjuk, de van jobbra shiftelő is. Ez az operátor annyit fog tenni,hogy a memóriában eltárolt biteket eggyel balra fogja eltolni és jobbra kiegészíti egy nullával.Tehát például az 'a' értéke egy, ez kettes számrendszerben van eltárolva a memóriában ennek bináris kódja 0001. A bitshift ezt fogja eggyel eltolni tehát 0010 lesz, ami már a 2-es szám. Majd 0100 lesz, ami a 4-es.És mindenegyes shiftnél növeljük a count értékét eggyel.Ezt mindaddig fogja így csinálni amíg az adott memóriacímben csak 0-ások lesznek, tehát az értéke 0 lesz.      
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
            
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>
        </para>

      <para>  Kód: </para>
      <programlisting language="c"><![CDATA[#include <stdio.h>
#include <math.h>

void
kiir (double tomb[], int db)
{
  int i;

  for (i = 0; i < db; ++i)
    printf ("%f\n", tomb[i]);
}

double
tavolsag (double PR[], double PRv[], int n)
{
  double osszeg = 0.0;
  int i;

  for (i = 0; i < n; ++i)
    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

  return sqrt(osszeg);
}

int
main (void)
{

  double L[4][4] = {
    {0.0, 0.0, 1.0 / 3.0, 0.0},
    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
    {0.0, 1.0 / 2.0, 0.0, 0.0},
    {0.0, 0.0, 1.0 / 3.0, 0.0}
  };

  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

  int i, j;

  for (;;)
    {

      for (i = 0; i < 4; ++i)
	{
	  PR[i] = 0.0;
	  for (j = 0; j < 4; ++j)
	    PR[i] += (L[i][j] * PRv[j]);
	}
      if (tavolsag (PR, PRv, 4) < 0.00000001)
	break;

      for (i = 0; i < 4; ++i)
	PRv[i] = PR[i];

    }

  kiir (PR, 4);

  return 0;
}]]></programlisting>

        <para>
            Magyarázat:A PageRank a Google keresőmotorjának legfontosabb eleme.Minél többen hivatkoznak egy oldalra, az annál jobb. A fenti C program négy lap PageRank értékét számolja ki.A kódunkhoz szükséges a math.h header file include-olása,ebben matematikai függvények találhatóak, pl.sqrt.A kód elején található egy void típusú függvény.A void annyit takar, hogy a függvény nem fog visszatéríteni semmilyen értéket.A függvény neve után zárójelek között adjuk meg a függvény paramétereit, jelen esetben a függvény egy double típusú tömböt, illetve egy int típusú változót vár. Ez a függvény egy for ciklus segítségével fogja kiíratni a konzolra a kapott tömb elemeit.A következő függvény már double típusú,tehát egy double típusú változót fog visszaadni.Paraméterként pedig két tömböt illetve egy egész számot vár.Ez a függvény fogja számolni a távolságot.A két tömb elemeit egyesével kivonja majd lényegében négyzetre emeli. Majd a függvény végén gyököt vonunk az sqrt segítségével, ezáltal biztos,hogy pozitív eredményt kapunk.A main függvényben lévő 'L' nevezetű mátrix mondja meg,hogy melyik oldalra hányan mutatnak linkekkel.A main függvény fő része egy végtelen for ciklus.A számítást egy másik for ciklussal végezzük el, ez egy sima mátrix szorzás. Ezután az így kapott eredményt átadjuk a tavolsag függvénynek, és ha az így visszakapott érték kisebb mint 0.00000001 akkor megszakítjuk a ciklust és átadjuk az értékeket kiíratásra.
            
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>
        	A Brun tétel kimondja,hogy az ikerprímek(olyan prímpárok melyeknek különbsége 2) reciprokösszege egy véges értékhez konvergál.A következő kód ennek a tételnek R-beli megvalósítása.
        </para>
        <programlisting language="R"><![CDATA[
library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]></programlisting>
<para>
	Ahhoz,hogy kódunk működjön telepítenünk kell a matlab csomagot, ezt megtehetjük az intsall.packages("matlab") parancssal.Ezután ezt a csomagot a library(matlab) parancssal be is töltjük. Ezek után stp néven létrehozunk egy függvényt amely paraméterül kap majd egy számot.primes néven létrehozunk egy vektort amelyben eltároljuk a paraméterként kapott számig a prímszámokat. Ezután a diff vektorban kiszámoljuk a prím párok különbségét, ezt úgy tesszük meg,hogy előszőr eltároljuk a primes vektor második tagjától a vektor végéig a prímeket, majd ezekből kivonjuk a primes vektor első tagjától az utolsó előtti tagjáig a prímeket.A következő sorban az idx vektorban eltároljuk azoknak a vektoroknak az indexét ahol a különbség kettő(tehátikerpímek).A t1primes vektorban eltároljuk az így kapott prímpárok első tagját, a t2primes-ban pedig a párok második tagját.Az rt1plust2 vektorba kiszámoljuk a két vektor reciprokösszegét, majd return-el ezeknek az összegüket íratjuk ki. Az utolsó három sorral pedig ki is rajzoltatjuk az így kapott eredményt.
	</para> 

    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
        	A Monty Hall paradoxon egy az USA-ban futó televíziós vetélkedőn alapul.A játékost megkéri a műsorvezető, hogy válasszon 3 csukott ajtó közül. A három ajtó közül az egyik mögött egy nagyon értékes nyeremény van, a másik kettő mögött pedig valami nagyon értéktelen. A játékos választása után a műsorvezető a másik két ajtó közül kinyit egyet ami mögött biztosan nincsen az értékes nyeremény. Ezután a műsorvezető megkérdezi a játékost,hogy szeretné-e a másik ajtót választani,vagy marad az eredeti döntésénél.És itt jön a paradoxon. Ugyanis az első választásnál a játékosnak 1/3 esélye volt arra,hogy az értékés nyereményt választja.Most a józan ész azt sugallja,hogy mindegy melyik ajtót választja, úgyis 50-50% esélye van a nyereményre,de igazából 2/3 esélye lenne a nyereményre ha átvált a másik ajtóra.Ezt talán könnyebb elfogadni ha elképzeljük ugyanezt csak 100 ajtóval. Tehát a játékos választ egyet,1/100 az esélye arra,hogy eltalálja a nyereményt és 99/100 az esély arra,hogy valamelyik másik ajtó mögött van. Ezután a játékvezető kinyit 98 ajtót ami mögött nincs semmi és felteszi ugyanazt a kérdést:Váltunk-e ajtót?Talán így könnyebb belátnunk,hogy sokkal nagyobb esélyünk van nyerni ha váltunk a másik ajtóra, ugyanis az az eredeti 99/100 esély oda koncentrálódik.
        </para>

        <para>
            A következő kód ennek a problémának R szimulációja:
        </para>
        <programlisting language="R"><![CDATA[
kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
]]></programlisting>

<para>
	Kódunk elején a kiserletek_szama vektorban mentjük el,hogy hányszor hajtuk végre a szimulációt.Ezután a kiserlet vektorba tároljuk el,hogy melyik ajtó mögött lesz a nyeremény, 1-3 ig fog egy számot random választani annyiszor ahányszor szimuláljuk.A jatekos vektorban ugyanezt csináljuk, ez fogja megadni a játékos választását.A musorvezeto vektor azt az ajtót fogja tárolni amit a műsorvezető fog kinyitni. Ezt úgy határozzuk meg, hogy indítunk egy for ciklust ami végigmegy az összes létrejött eseten. Ezután egy if segítségével először megnézzük azt az esetet amikor a játékos eltalálta a nyereményt rejtő ajtót, azaz a kiserlet és a jatekos vektor egyenlő. Ha ez az eset áll fent akkor a maradék két ajtó közül random választ egyet a program. Ha pedig nem egyezik meg a választása a játékkosnak a nyereményt rejtő ajtóval akkor, azt a két ajtó kivesszük a választásból és a maradék egy ajtót fogja kinyitni a műsorvezető.Ezután a nemvaltoztatesnyer vektorban eltároljuk azokat az eseteket amikor akkor nyerne a játékos ha nem változtat. A valtoztat vektorban pedig azokat az eseteket amikor akkor nyerne amikor változtat. Ezután kiíratjuk ezeket.
</para>

	
    </section>

</chapter>                
